{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"07. Week 12-2 (211115)","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyOxBUTsEMdS/bf3fJQcydtL"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fj4xCghVPr0S","executionInfo":{"status":"ok","timestamp":1636990016325,"user_tz":-540,"elapsed":1440,"user":{"displayName":"‍이호재[재학 / 영어학과]","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"02475819067827770201"}},"outputId":"55069c78-6bf6-4348-e6e6-d175bfe0cc0d"},"source":["from google.colab import drive\n","drive.mount('/gdrive', force_remount=True)"],"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /gdrive\n"]}]},{"cell_type":"markdown","metadata":{"id":"U9HQ8SWESYc_"},"source":["# Movie recommendation\n","- 쓸 columns = index #, 'overview', 'title'\n","- sample 2000개로 해보고, 전체로 확장하기\n","\n","형식은 아래와 같음.\n","```python\n","def recommendMovie(movie):   # overview로 텍스트 분석해서 각 영화에 점수\n","   similarMovielist = tfidf()\n","   return similarMovielist\n","```\n","예시를 든다면,\n","```python\n","recommendMovie('toy story')\n","```\n","코드를 실행한다면, 10 movie1, 1067 movie2, ... 이런 식으로\n","\n"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":527},"id":"-a3dowzKtKP7","executionInfo":{"status":"ok","timestamp":1636990019699,"user_tz":-540,"elapsed":1529,"user":{"displayName":"‍이호재[재학 / 영어학과]","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"02475819067827770201"}},"outputId":"e0efbc34-5a1f-4d51-e95d-903f18be17e2"},"source":["import pandas as pd\n","import numpy as np\n","\n","PATH = \"/gdrive/MyDrive/01. Programming/Practical NLP/data/Week 12/\"\n","\n","df = pd.read_csv(PATH + \"movies_metadata.csv\", low_memory=False)\n","df = df[['overview', 'title']]\n","\n","print(df.isnull().sum())   # check for NaN values\n","df = df.fillna(\" \")\n","print(df.isnull().sum())   # check for NaN values\n","\n","# df = df.sample(3000).reset_index(drop=True)\n","df"],"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["overview    954\n","title         6\n","dtype: int64\n","overview    0\n","title       0\n","dtype: int64\n"]},{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>overview</th>\n","      <th>title</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Led by Woody, Andy's toys live happily in his ...</td>\n","      <td>Toy Story</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>When siblings Judy and Peter discover an encha...</td>\n","      <td>Jumanji</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>A family wedding reignites the ancient feud be...</td>\n","      <td>Grumpier Old Men</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Cheated on, mistreated and stepped on, the wom...</td>\n","      <td>Waiting to Exhale</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Just when George Banks has recovered from his ...</td>\n","      <td>Father of the Bride Part II</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>45461</th>\n","      <td>Rising and falling between a man and woman.</td>\n","      <td>Subdue</td>\n","    </tr>\n","    <tr>\n","      <th>45462</th>\n","      <td>An artist struggles to finish his work while a...</td>\n","      <td>Century of Birthing</td>\n","    </tr>\n","    <tr>\n","      <th>45463</th>\n","      <td>When one of her hits goes wrong, a professiona...</td>\n","      <td>Betrayal</td>\n","    </tr>\n","    <tr>\n","      <th>45464</th>\n","      <td>In a small town live two brothers, one a minis...</td>\n","      <td>Satan Triumphant</td>\n","    </tr>\n","    <tr>\n","      <th>45465</th>\n","      <td>50 years after decriminalisation of homosexual...</td>\n","      <td>Queerama</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>45466 rows × 2 columns</p>\n","</div>"],"text/plain":["                                                overview                        title\n","0      Led by Woody, Andy's toys live happily in his ...                    Toy Story\n","1      When siblings Judy and Peter discover an encha...                      Jumanji\n","2      A family wedding reignites the ancient feud be...             Grumpier Old Men\n","3      Cheated on, mistreated and stepped on, the wom...            Waiting to Exhale\n","4      Just when George Banks has recovered from his ...  Father of the Bride Part II\n","...                                                  ...                          ...\n","45461        Rising and falling between a man and woman.                       Subdue\n","45462  An artist struggles to finish his work while a...          Century of Birthing\n","45463  When one of her hits goes wrong, a professiona...                     Betrayal\n","45464  In a small town live two brothers, one a minis...             Satan Triumphant\n","45465  50 years after decriminalisation of homosexual...                     Queerama\n","\n","[45466 rows x 2 columns]"]},"metadata":{},"execution_count":3}]},{"cell_type":"markdown","metadata":{"id":"-Oc-0VyruyAv"},"source":["# 1. CountVectorizer 기반"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sVjgHik_8nCY","executionInfo":{"status":"ok","timestamp":1636990021950,"user_tz":-540,"elapsed":289,"user":{"displayName":"‍이호재[재학 / 영어학과]","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"02475819067827770201"}},"outputId":"98d5f0c0-a253-41b9-814c-1158fc8934ab"},"source":["df['title'].value_counts()"],"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Cinderella                                       11\n","Hamlet                                            9\n","Alice in Wonderland                               9\n","Beauty and the Beast                              8\n","Les Misérables                                    8\n","                                                 ..\n","The Land of Happiness                             1\n","Sus ojos se cerraron y el mundo sigue andando     1\n","Pom Poko                                          1\n","Lover Come Back                                   1\n","The Boys from Brazil                              1\n","Name: title, Length: 42278, dtype: int64"]},"metadata":{},"execution_count":4}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"A_VtTXKfveJV","executionInfo":{"status":"ok","timestamp":1636990028414,"user_tz":-540,"elapsed":3433,"user":{"displayName":"‍이호재[재학 / 영어학과]","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"02475819067827770201"}},"outputId":"a8a2e3e6-2b9b-468a-811e-1b033e2bab15"},"source":["from sklearn.feature_extraction.text import CountVectorizer\n","from sklearn.metrics.pairwise import cosine_similarity\n","from collections import OrderedDict\n","\n","def recommendMovie_cv(movie):\n","  \n","  if movie not in df['title'].tolist(): raise Exception('The movie you searched for does not exist.')\n","  else:\n","    data = df['overview'].tolist()\n","    bowModel = CountVectorizer(stop_words = 'english', max_features=1000)   # max_features를 너무 작게 설정하면 representation이 제대로 되지 않음\n","    count_dtm = bowModel.fit_transform(data).toarray()\n","\n","    # 1. query\n","    info = OrderedDict()   # key: similarity, value: movie name\n","    query_index = df.index[df['title'] == movie][0]   # 같은 영화, 다른 overview일 경우, 앞에 나온 overview 사용\n","    query_vector = count_dtm[query_index].reshape(-1, 1).T   # 1d -> 2d & transpose (to match shape)\n","    scores = cosine_similarity(query_vector, count_dtm).T\n","\n","    scores[query_index] = 1e-7   # 자기 자신과의 similarity를 작은 값으로 초기화\n","\n","    for i in range(len(scores)):\n","      info[scores[i].item()] = df.loc[i, \"title\"]   # OrderedDict에 정보 추가\n","    sorted_info = OrderedDict(sorted(info.items(), key=lambda x: x[0], reverse=True))\n","\n","    # 2. answer: top 5 similar movies\n","    for rank, (_, name) in enumerate(sorted_info.items(), 1):\n","      print(f\"#{rank}. {name}\")\n","      if rank == 5 : break\n","\n","    # return resultq\n","\n","recommendMovie_cv(\"Cinderella\")"],"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["#1. Vuonna 85\n","#2. Cinderella II: Dreams Come True\n","#3. God Loves Caviar\n","#4. The Stone Angel\n","#5. Penny Dreadful\n"]}]},{"cell_type":"markdown","metadata":{"id":"IrlUgZOYErUJ"},"source":["# 2. TfidfVectorizer 기반"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IzUKb8aKtwn2","executionInfo":{"status":"ok","timestamp":1636990033801,"user_tz":-540,"elapsed":2979,"user":{"displayName":"‍이호재[재학 / 영어학과]","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"02475819067827770201"}},"outputId":"b1d38055-7634-4688-949e-4227d185da60"},"source":["from sklearn.feature_extraction.text import TfidfVectorizer\n","\n","\n","def recommendMovie_tf(movie):\n","  if movie not in df['title'].tolist() : raise Exception('The movie you searched for does not exist.')\n","  else:\n","    data = df['overview'].tolist()\n","    tfidfModel = TfidfVectorizer(stop_words='english', max_features=1000)   # 1000으로 설정함으로써 memory issue 해결\n","    tfidf_dtm = tfidfModel.fit_transform(data).toarray()\n","\n","    # 1. query\n","    info = OrderedDict()   # key: similarity, value: movie name\n","    query_index = df.index[df['title'] == movie][0]   # 같은 영화, 다른 overview일 경우, 앞에 나온 overview 사용\n","    query_vector = tfidf_dtm[query_index].reshape(-1, 1).T   # 1d -> 2d & transpose (to match shape)\n","    scores = cosine_similarity(query_vector, tfidf_dtm).T\n","\n","    scores[query_index] = 1e-7   # 자기 자신과의 similarity를 작은 값으로 초기화\n","\n","    for i in range(len(scores)):\n","      info[scores[i].item()] = df.loc[i, \"title\"]   # OrderedDict에 정보 추가\n","    sorted_info = OrderedDict(sorted(info.items(), key=lambda x: x[0], reverse=True))\n","\n","    # 2. answer: top 5 similar movies\n","    for rank, (_, name) in enumerate(sorted_info.items(), 1):\n","      print(f\"#{rank}. {name}\")\n","      if rank == 5 : break\n","\n","recommendMovie_tf(\"Cinderella\")"],"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["#1. Vuonna 85\n","#2. Cinderella II: Dreams Come True\n","#3. The Woman Who Wasn't There\n","#4. God Loves Caviar\n","#5. Tom and Jerry's Giant Adventure\n"]}]}]}